#include "stdafx.h"
#include "DFA.h"


x::pool<x::DFA::Node> x::DFA::Node::_pool = (MAX_DFA_NODES);

///////////////////////////////////////////////////////////////////////////////////////////////

x::DFA::Node::Node(id_t id, bool accepting):
	id(id),
	accepting(accepting),
	transitions{nullptr}
{
}

///////////////////////////////////////////////////////////////////////////////////////////////

size_t x::DFA::memory() const {
	return sizeof(x::DFA) + _nodes.memory() + _nodes.size() * (sizeof(Node));
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::DFA::connect(id_t src, id_t dest, char ch) {
	_nodes[src]->transitions[(uint8_t)ch] = _nodes[dest];
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::DFA::~DFA() {
	if (_nodes.data() != nullptr)
		_nodes.call_delete();
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::DFA::DFA(size_t size):
	_nodes(size, size)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::DFA::DFA(x::vector<Node*>&& _nodes):
	_nodes(_nodes.move())
{
}

///////////////////////////////////////////////////////////////////////////////////////////////

x::DFA::DFA(x::DFA && other):
	_nodes(other._nodes.move())
{
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::DFA::display() const {
	_nodes.call(&Node::display);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void x::DFA::Node::display() const {
	std::cout << (int)id << (accepting ? "*:\n" : ":\n");
	for (size_t c = 0; c < CHAR_RANGE; ++c) {
		if (transitions[c])
			std::cout << (char)c << " -> " << (int)transitions[c]->id << "\n";
	}
	std::cout << "\n";
}